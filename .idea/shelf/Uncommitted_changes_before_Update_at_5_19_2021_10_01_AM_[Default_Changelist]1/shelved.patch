Index: final project.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># This is importing both pygame and random.\r\nimport pygame\r\n\r\n#This imports everything from the settings file and sprites file\r\nfrom Settings import *\r\nfrom sprites import *\r\nfrom os import path\r\nfrom Camera_maps import *\r\n\r\ndef draw_player_health(surf, x, y, pct):\r\n    if pct < 0:\r\n        pct = 0\r\n    Bar_length = 100\r\n    Bar_height = 20\r\n    fill = pct * Bar_length\r\n    outline_rect = pygame.Rect(x, y, Bar_length, Bar_height)\r\n    fill_rect = pygame.Rect(x, y, fill, Bar_height)\r\n    if pct > 100:\r\n        col = Green\r\n    elif pct > 60:\r\n        col = Yellow\r\n    else:\r\n        col = Red\r\n    pygame.draw.rect(surf, col, fill_rect)\r\n    pygame.draw.rect(surf, White, outline_rect, 2)\r\n\r\n\r\nclass Game:\r\n    def __init__(self) -> object:\r\n        #This is initiating pygame and the pygame mixer and it creates the window size.\r\n        pygame.init()\r\n        pygame.mixer.init()\r\n        self.screen= pygame.display.set_mode((Width, Height))\r\n        pygame.display.set_caption(Title)\r\n        self.clock= pygame.time.Clock()\r\n        self.Active = True\r\n        self.load_data()\r\n\r\n    def load_data(self):\r\n        game_folder = path.dirname(__file__)\r\n        maps_folder = path.join(game_folder, 'maps')\r\n        img_folder = path.join(game_folder, 'img')\r\n        player_folder = path.join(img_folder, 'individual chracter sprites')\r\n        zombie_folder = path.join(img_folder,'individual enemy sprites')\r\n        self.map1= maps(path.join(maps_folder, 'Map1.tmx'))\r\n        self.map_img = self.map1.Make_map()\r\n        self.map_rect = self.map_img.get_rect()\r\n        self.player_img = pygame.image.load(path.join(player_folder, 'player_right1.png')).convert_alpha()\r\n        self.zombie_img = pygame.image.load(path.join(zombie_folder, 'enemy_left1.png')).convert_alpha()\r\n\r\n\r\n\r\n    def new(self):\r\n        self.all_sprites = pygame.sprite.Group()\r\n        self.platforms = pygame.sprite.Group()\r\n        self.Zombie_bar = pygame.sprite.Group()\r\n        self.Zombies = pygame.sprite.Group()\r\n        self.exit = pygame.sprite.Group()\r\n        self.player = Player(self)\r\n        self.all_sprites.add(self.player)\r\n        self.Plat_rect = []\r\n        for tile_object in self.map1.tmxdata.objects:\r\n            if tile_object.name == \"platform\":\r\n                plat_new = Platform(tile_object.x, tile_object.y, tile_object.width, tile_object.height)\r\n                self.platforms.add(plat_new)\r\n                self.Plat_rect.append(pygame.Rect(tile_object.x, tile_object.y, tile_object.width, tile_object.height))\r\n            if tile_object.name == \"player_spawn\":\r\n                self.player.pos = ((tile_object.x, tile_object.y))\r\n            if tile_object.name == \"zombie_spawn\":\r\n                self.Zombies.add(Zombie(self, tile_object.x, tile_object.y ))\r\n            if tile_object.name == \"zombie_bar\":\r\n                bar_new= Zombie_bar(tile_object.x, tile_object.y, tile_object.width, tile_object.height)\r\n                self.Zombie_bar.add(bar_new)\r\n            if tile_object.name == \"exit\":\r\n                exit_new= Exit(tile_object.x, tile_object.y, tile_object.width, tile_object.height)\r\n                self.exit.add(exit_new)\r\n\r\n        self.camera = camera(Width, Height)\r\n        self.run()\r\n        return self.Plat_rect\r\n\r\n\r\n\r\n    def run(self):\r\n        self.playing = True\r\n        while self.playing:\r\n            self.clock.tick(FPS)\r\n            self.events()\r\n            self.update()\r\n            self.draw()\r\n\r\n\r\n    def update(self):\r\n\r\n        self.all_sprites.update()\r\n        # check if player hits a platform - only if falling\r\n        if self.player.vel.y > 0:\r\n            hits = pygame.sprite.spritecollide(self.player, self.platforms, False)\r\n            if hits:\r\n                self.player.pos.y = hits[0].rect.top\r\n                self.player.vel.y = 0\r\n        self.camera.update(self.player)\r\n\r\n        #check if zombie hits a platform - only if falling\r\n        for i in self.Zombies:\r\n            hits_zombie = pygame.sprite.spritecollide(i, self.platforms, False)\r\n            if hits_zombie:\r\n                i.pos.y = hits_zombie[0].rect.top\r\n                i.vel.y = 0\r\n\r\n        hits = pygame.sprite.groupcollide(self.Zombies, self.Sword, False, True)\r\n        for hit in hits:\r\n            hit.health -= Sword_damage\r\n            hit.vel = vec(0, 0)\r\n\r\n\r\n\r\n    def events(self):\r\n        #this for loop is processing events\r\n        for event in pygame.event.get():\r\n            #this is statement checks if the player has quit\r\n            if event.type == pygame.QUIT:\r\n                if self.playing:\r\n                    self.playing = False\r\n                #if they have it ends the game loop\r\n                self.Active= False\r\n            hit_exit = pygame.sprite.spritecollide(self.player, self.exit, False)\r\n            if hit_exit:\r\n                pygame.quit()\r\n\r\n    def draw_grid(self):\r\n        for x in range(0, Width, Tilesize):\r\n            pygame.draw.line(self.screen, Lightgrey, (x,0), (x,Height))\r\n        for y in range(0, Height, Tilesize):\r\n            pygame.draw.line(self.screen, Lightgrey, (0, y), (Width,y))\r\n\r\n\r\n    def draw(self):\r\n        #remouve this later\r\n        pygame.display.set_caption(\"{:.2}\".format(self.clock.get_fps()))\r\n\r\n\r\n        self.screen.fill(Black)\r\n        self.draw_grid()\r\n        self.screen.blit(self.map_img, self.camera.applyRect(self.map_rect))\r\n        for sprite in self.all_sprites:\r\n            if isinstance(sprite, Zombies):\r\n                sprite.draw_health()\r\n            self.screen.blit(sprite.image, self.camera.apply(sprite))\r\n        draw_player_health(self.screen, 10, 10, self.player.health / player_health)\r\n        pygame.display.flip()\r\n\r\n    def show_start_screen(self):\r\n        pass\r\n\r\n    def show_gameover_screen(self):\r\n        pass\r\n\r\n\r\n\r\n\r\n\r\ngame = Game()\r\ngame.show_start_screen()\r\nwhile game.Active:\r\n    game.new()\r\n    game.show_gameover_screen()\r\n\r\npygame.quit()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/final project.py b/final project.py
--- a/final project.py	
+++ b/final project.py	
@@ -108,10 +108,7 @@
                 i.pos.y = hits_zombie[0].rect.top
                 i.vel.y = 0
 
-        hits = pygame.sprite.groupcollide(self.Zombies, self.Sword, False, True)
-        for hit in hits:
-            hit.health -= Sword_damage
-            hit.vel = vec(0, 0)
+
 
 
 
