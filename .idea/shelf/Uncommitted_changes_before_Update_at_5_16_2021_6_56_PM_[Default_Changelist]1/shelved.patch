Index: sprites.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nimport pygame\r\nfrom Settings import *\r\nvec = pygame.math.Vector2\r\n\r\nclass Player(pygame.sprite.Sprite):\r\n    def __init__(self, game):\r\n        self.groups = game.all_sprites\r\n        pygame.sprite.Sprite.__init__(self, self.groups)\r\n        self.game = game\r\n        self.image = game.player_img\r\n        self.rect = self.image.get_rect()\r\n        self.pos = vec(0, 0)\r\n        self.rect.center = self.pos\r\n        self.vel = vec(0, 0)\r\n        self.acc = vec(0, 0)\r\n\r\n    def jump(self):\r\n        # jump only if standing on a platform\r\n        self.rect.x += 1\r\n        hits = pygame.sprite.spritecollide(self, self.game.platforms, False)\r\n        self.rect.x -= 1\r\n        if hits:\r\n            self.vel.y = -40\r\n\r\n\r\n\r\n    def update(self):\r\n        self.acc = vec(0, player_grav)\r\n        self.rect.x += 1\r\n        hit_y = pygame.sprite.spritecollide(self, self.game.platforms, False)\r\n        self.rect.x -= 1\r\n        self.ground = True\r\n\r\n        # if self.ground == False and Key[pygame.K_SPACE]:\r\n        #     self.vel.y = -20\r\n        #\r\n        # if hit_y:\r\n        #     if self.vel.y > 0:\r\n        #         self.vel.y = 0\r\n        #         self.rect.bottom = hit_y[0].rect.top\r\n        #         self.ground = True\r\n        #     if self.vel.y < 0:\r\n        #         self.vel.y = 0\r\n        #         self.rect.top = hit_y[0].rect.bottom\r\n        # else:\r\n        #     self.ground = False\r\n\r\n        if self.vel.y > 0:\r\n            hit_y = pygame.sprite.spritecollide(self, self.game.platforms, False)\r\n            if hit_y:\r\n                self.vel.y = 0\r\n        # if not self.collision():\r\n        self.acc = vec(0, player_grav)\r\n        self.rect.x += 1\r\n        hits = pygame.sprite.spritecollide(self, self.game.platforms, False)\r\n        self.rect.x -= 1\r\n\r\n        self.acc += self.vel * player_fric\r\n        self.vel += self.acc\r\n        self.pos += self.vel + 0.5 * self.acc\r\n\r\n        self.rect.midbottom = self.pos\r\n\r\n    # def collision(self):\r\n    #     for platform in self.game.platforms:\r\n    #         if platform.x == self.x + self.vel.x and platform.y == self.y + self.vel.y:\r\n    #             return True\r\n    #\r\n    #         return False\r\n    #     for i in self.game.platforms:\r\n    #         hit_x = pygame.sprite.spritecollide(self, self.game.platforms, False)\r\n    #         if hit_x:\r\n    #             if self.vel.x > 0:\r\n    #                 self.acc.x = 0\r\n    #                 self.vel.x = 0\r\n    #                 self.rect.right = hit_x[0].rect.left\r\n    #                 print('Hit')\r\n    #             if self.vel.x < 0:\r\n    #                 self.acc.x = 0\r\n    #                 self.vel.x = 0\r\n    #                 self.rect.left = hit_x[0].rect.right\r\n\r\n\r\n\r\nclass Zombie(pygame.sprite.Sprite):\r\n    def __init__(self, game, x, y):\r\n        self.groups = game.all_sprites, game.Zombies\r\n        pygame.sprite.Sprite.__init__(self, self.groups)\r\n        self.game = game\r\n        self.image = game.zombie_img\r\n        self.rect = self.image.get_rect()\r\n        self.end = x + (Tilesize *2)\r\n        self.pos = vec(x, y)\r\n        self.rect.center = self.pos\r\n        self.vel = vec(0, 0)\r\n        self.acc = vec(0, 0)\r\n        self.path= [x, self.end]\r\n\r\n    def update(self):\r\n\r\n        self.acc.y = Zombie_grav\r\n        self.acc.y += self.vel.y * player_fric\r\n        self.vel.y += self.acc.y\r\n        self.pos.y += self.vel.y + 0.5 * self.acc.y\r\n        if self.pos.x <= self.path[0]:\r\n            self.acc.x = 0.5\r\n        elif self.pos.x >= self.path[1]:\r\n            self.acc.x = -0.5\r\n        self.acc.x += self.vel.x * player_fric\r\n        self.vel.x += self.acc.x\r\n        self.pos.x += self.vel.x + 0.5 * self.acc.x\r\n\r\n\r\n\r\n        self.rect.midbottom = self.pos\r\n\r\n\r\nclass Platform(pygame.sprite.Sprite):\r\n    def __init__(self, x, y, w, h):\r\n        pygame.sprite.Sprite.__init__(self)\r\n        self.image = pygame.Surface((w, h))\r\n        self.image.fill(Green)\r\n        self.rect = self.image.get_rect()\r\n        self.rect.x = x\r\n        self.rect.y = y\r\n\r\nclass Zombie_bar(pygame.sprite.Sprite):\r\n    def __init__(self, x, y, w, h):\r\n        pygame.sprite.Sprite.__init__(self)\r\n        self.image = pygame.Surface((w, h))\r\n        self.image.fill(Green)\r\n        self.rect = self.image.get_rect()\r\n        self.rect.x = x\r\n        self.rect.y = y\r\n\r\nclass Exit(pygame.sprite.Sprite):\r\n    def __init__(self, x, y, w, h):\r\n        pygame.sprite.Sprite.__init__(self)\r\n        self.image = pygame.Surface((w, h))\r\n        self.image.fill(Green)\r\n        self.rect = self.image.get_rect()\r\n        self.rect.x = x\r\n        self.rect.y = y\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sprites.py b/sprites.py
--- a/sprites.py	
+++ b/sprites.py	
@@ -14,6 +14,7 @@
         self.rect.center = self.pos
         self.vel = vec(0, 0)
         self.acc = vec(0, 0)
+        self.health = 50
 
     def jump(self):
         # jump only if standing on a platform
@@ -83,6 +84,8 @@
 
 
 
+
+
 class Zombie(pygame.sprite.Sprite):
     def __init__(self, game, x, y):
         self.groups = game.all_sprites, game.Zombies
